<?php
#
#  Библиотека для работы с пользовательским кешем
#


class user_cache_lib
{
        var $std;
        var $mem_cache = array();

        /*--------------------------------------------------------------------*/
        // Конструктор
        /*--------------------------------------------------------------------*/

        function user_cache_lib(  )
        {


        }

        /*--------------------------------------------------------------------*/
        // Обновление пользовательского кеша
        /*--------------------------------------------------------------------*/

        function updateMemberCache( $id = 0, $type = 'update', $value = array() )
        {
                //-----------------------------------
                // очищаем старую выборку кеша
                //-----------------------------------

                $this->mem_cache = array();

                //-----------------------------------
                // прользователь должен быть с ID
                //-----------------------------------

                $id = intval($id);
                if(!$id) return;

                //-----------------------------------
                // тип действий должен быть срого фиксировным
                //-----------------------------------
                $type = $type == 'update' ? $type : 'delete';

                //-----------------------------------
                // пришедший массив на обновление должен быть не пуст
                //-----------------------------------
                if( !count($value) or count($value) < 1 or !is_array($value))
                {
                        return;
                }

                //-----------------------------------
                // выбираем кеш для требуемого пользователя
                //-----------------------------------

                $this->std->db->do_query("SELECT user_id, user_cache FROM se_users WHERE user_id={$id}");
                $this->mem_cache = $this->std->db->fetch_row();

                //-----------------------------------
                // если сессия не распакована то распаковываем ее
                //-----------------------------------
                $this->mem_cache['user_cache'] = unserialize($this->mem_cache['user_cache']);

                //-----------------------------------
                // кеш должен быть массивом
                //-----------------------------------
                if( !is_array($this->mem_cache['user_cache']))
                {
                        $this->mem_cache['user_cache'] = array();
                }

                //-----------------------------------
                // обновляем данные в массиве сессии
                //-----------------------------------
                if( $type == 'update' )
                {
                        foreach( $value as $key => $val )
                        {
                                $this->mem_cache['user_cache'][ $key ] = $val;
                        }
                }
                else
                {
                        foreach( $value as $key => $val )
                        {
                                unset($this->mem_cache['user_cache'][ $key ]);
                        }
                }


				//--------------------------------------------------------
                // обновляем данные в массиве сессии текущего пользователя
                //--------------------------------------------------------
				if ( $id == $this->std->member['user_id'] )
				{
						$this->std->member['user_cache'] = serialize( $this->mem_cache['user_cache'] );
				}

                //-----------------------------------
                // обновляем данные в базе
                //-----------------------------------
                $this->std->db->do_update('users', array('user_cache' => serialize($this->mem_cache['user_cache'])), "user_id='{$id}'");
        }

        /*------------------------------------------------------------------*/
        // Значение временных данных по ключу для текущего пользователя
        /*------------------------------------------------------------------*/
        /**
           * получаем значение из кеша пользователя
           *
           * @param char $key
           * @return mixed
           */
        /*------------------------------------------------------------------*/
        function getValueMemCache($key = '')
        {
                //-----------------------------------
                // если ключ пуст то возвращаем пустоту
                //-----------------------------------
                $key = trim($key);
                if( !$key )
                {
                        return;
                }

                //-----------------------------------
                // главное, чтобы user_cache был массивом
                //-----------------------------------
                if(!is_array($this->std->member['user_cache']))
                {
                          $this->std->member['user_cache'] = unserialize($this->std->member['user_cache']);
                }

                return $this->std->member['user_cache'][ $key ];
          }

        /*------------------------------------------------------------------*/
        // Значение временных данных по ключу для конкретного пользователя по ID
        /*------------------------------------------------------------------*/
        /**
           * получаем значение из кеша пользователя
           *
           * @param char $key
           * @return mixed
           */
        /*------------------------------------------------------------------*/
        function getValueMemCacheById($id = 0, $key = '')
        {
                $user_cache = array();

                //-----------------------------------
                // если id не существует то возвращаем пустоту
                //-----------------------------------
                $id = intval($id);
                if( !$id ) return;

                //-----------------------------------
                // если ключ пуст то возвращаем пустоту
                //-----------------------------------
                $key = trim($key);
                if( !$key )
                {
                        return;
                }

                //-----------------------------------
                // выбираем кеш для требуемого пользователя
                //-----------------------------------

                $this->std->db->do_query("SELECT user_cache FROM se_users WHERE user_id={$id}");
                $user_cache = $this->std->db->fetch_row();

                //-----------------------------------
                // главное, чтобы user_cache был массивом
                //-----------------------------------
                $user_cache['user_cache'] = unserialize($user_cache['user_cache']);

                if( !is_array($user_cache['user_cache']) )
                {
                        $user_cache['user_cache'] = array();
                }

                return $user_cache['user_cache'][ $key ];
          }

}

?>