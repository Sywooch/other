<?php

$_SERVER['SERVER_NAME'] = 'unit-test.loc';
require_once __DIR__ . '/../../unit-test.loc.php';
require_once __DIR__ . '/../../config/config.php';
require_once __DIR__ . '/../repository/PresentsRepository.class.php';

use Referral\Repository\PresentsRepository;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-26 at 14:28:25.
 */
class PresentsRepositoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PresentsRepository
     */
    protected $object;

    /**
     * @var \CMS
     */
    protected $cms;

    /**
     * Constructs a test case with the given name.
     *
     * @param  string $name
     * @param  array  $data
     * @param  string $dataName
     */
    public function __construct($name = NULL, array $data = array(), $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        exec("mysql -u" . DB_USER . " -p" . DB_PASS . " " . DB_BASE . " < " . __DIR__ . "/_files/site_referrals_presents.sql");
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->cms = new CMS();
        $this->cms->Check();
        $this->object = new PresentsRepository($this->cms);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Referral\Repository\PresentsRepository::RegisterGift
     */
    public function testRegisterGift()
    {
        for($i = 1; $i < 14; ++$i){
            $this->object->RegisterGift($i);
            $presentExists = $this->cms->querySingleValue("
                SELECT COUNT(*)
                FROM `site_referrals_presents`
                WHERE `referral_order_id` = $i
            ");
        }

        $this->assertTrue($presentExists == 1, "Ошибка добавления подарка");
    }

    /**
     * @covers Referral\Repository\PresentsRepository::GetGiftsForUser
     * @depends testRegisterGift
     */
    public function testGetGiftsForUser()
    {
        $gifts = $this->object->GetGiftsForUser(1);
        for($i = 2; $i < 6; ++$i){
            $this->assertTrue(in_array(array('referral_order_id' => $i, 'sent' => 0), $gifts), "Нет подарка для пользователя");
        }

        $gifts = $this->object->GetGiftsForUser(3);
        for($i = 6; $i < 8; ++$i){
            $this->assertTrue(in_array(array('referral_order_id' => $i, 'sent' => 0), $gifts), "Нет подарка для пользователя");
        }
    }

    /**
     * @covers Referral\Repository\PresentsRepository::GetGiftsFromUser
     * @depends testRegisterGift
     */
    public function testGetGiftsFromUser()
    {
        $gifts = $this->object->GetGiftsFromUser(2);
        $this->assertEquals(array(array('referral_order_id' => 3, 'sent' => 0)), $gifts, "Неверные подарки от пользователя");
    }

    /**
     * @covers Referral\Repository\PresentsRepository::SendGift
     * @depends testRegisterGift
     */
    public function testSendGift()
    {
        $this->object->SendGift(3);
        $gifts = $this->object->GetGiftsFromUser(2, 1);
        $this->assertEquals(array(array('referral_order_id' => 3, 'sent' => 1)), $gifts, "Неверные отправлен подарок");
    }
}
