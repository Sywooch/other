<?php
$_SERVER['SERVER_NAME'] = 'unit-test.loc';
require_once __DIR__ . '/../../unit-test.loc.php';
require_once __DIR__ . '/../../config/config.php';
require_once __DIR__ . '/../repository/UserRepository.class.php';

use Referral\Repository\UserRepository;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-25 at 13:07:02.
 */
class UserRepositoryTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var UserRepository
     */
    protected $object;

    /**
     * @var CMS
     */
    protected $cms;

    /**
     * Тестовые пользователи
     *
     * testReferral
     *      -> testReferralChild1
     *      -> testReferralChild2
     *      -> testReferralChild3
     *          -> testReferralChild10
     *          -> testReferralChild11
     *          -> testReferralChild12
     *          -> testReferralChild13
     *      -> ...
     *      -> testReferralChild9
     *
     * @var array
     */
    private $testUsers = array(
        array('user_id' => -100, 'login' => 'testReferral', 'parent_id' => 0, 'status' => 2, 'balance' => 10.0, 'awaiting_money' => 5.0),
        array('user_id' => -101, 'login' => 'testReferralChild1', 'parent_id' => 1, 'status' => 0, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -102, 'login' => 'testReferralChild2', 'parent_id' => 1, 'status' => 0, 'balance' => 0.0, 'awaiting_money' => 0.0),

        array('user_id' => -103, 'login' => 'testReferralChild3', 'parent_id' => 1, 'status' => 1, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -104, 'login' => 'testReferralChild4', 'parent_id' => 1, 'status' => 1, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -105, 'login' => 'testReferralChild5', 'parent_id' => 1, 'status' => 1, 'balance' => 0.0, 'awaiting_money' => 1.0),

        array('user_id' => -106, 'login' => 'testReferralChild6', 'parent_id' => 1, 'status' => 2, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -107, 'login' => 'testReferralChild7', 'parent_id' => 1, 'status' => 2, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -108, 'login' => 'testReferralChild8', 'parent_id' => 1, 'status' => 2, 'balance' => 0.0, 'awaiting_money' => 5.0),
        array('user_id' => -109, 'login' => 'testReferralChild9', 'parent_id' => 1, 'status' => 2, 'balance' => 6.0, 'awaiting_money' => 0.0),

        array('user_id' => -110, 'login' => 'testReferralChild10', 'parent_id' => 3, 'status' => 0, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -111, 'login' => 'testReferralChild11', 'parent_id' => 3, 'status' => 0, 'balance' => 0.0, 'awaiting_money' => 0.0),
        array('user_id' => -112, 'login' => 'testReferralChild12', 'parent_id' => 3, 'status' => 0, 'balance' => 1.0, 'awaiting_money' => 0.0),
        array('user_id' => -113, 'login' => 'testReferralChild13', 'parent_id' => 3, 'status' => 0, 'balance' => 0.0, 'awaiting_money' => 0.0),
    );

    /**
     * Constructs a test case with the given name.
     *
     * @param  string $name
     * @param  array  $data
     * @param  string $dataName
     */
    public function __construct($name = NULL, array $data = array(), $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        exec("mysql -u" . DB_USER . " -p" . DB_PASS . " " . DB_BASE . " < " . __DIR__ . "/_files/site_referrals.sql");
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->cms = new CMS();
        $this->cms->Check();
        $this->object = new UserRepository($this->cms);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers UserRepository::AddUser
     */
    public function testAddUser()
    {
        foreach($this->testUsers as $user){
            $this->object->AddUser($user['login'], $user['user_id'], $user['parent_id']);
        }

        $userExists = $this->cms->querySingleValue("
            SELECT COUNT(*)
            FROM `site_referrals`
        ");

        $this->assertTrue($userExists == count($this->testUsers), "Ошибка добавления пользователей");
    }

    /**
     * @covers UserRepository::GetByBLId
     * @depends testAddUser
     */
    public function testGetByBLId()
    {
        foreach($this->testUsers as $testUser){
            $fetchedUser = $this->object->GetByBLId($testUser['user_id']);
            $this->assertEquals($fetchedUser['login'], $testUser['login'], "Получен неверный логин пользователя");
            $this->assertEquals($fetchedUser['parent_id'], $testUser['parent_id'], "Получен неверный родитель пользователя");
            $testUser['id'] = $fetchedUser['id'];
        }
    }

    /**
     * @covers UserRepository::GetParentsIds
     * @depends testAddUser
     */
    public function testGetParentsIds()
    {
        $parents = $this->object->GetParentsIds(11);
        $this->assertEquals(array(3, 1, 0), $parents, "Неверно получен список родителей");
    }

    /**
     * @covers UserRepository::GetById
     * @depends testAddUser
     */
    public function testGetById()
    {
        foreach($this->testUsers as $key => $testUser){
            $id = $key+1;
            $fetchedUser = $this->object->GetById($id);
            $this->assertEquals($fetchedUser['login'], $testUser['login'], "Получен неверный логин пользователя");
            $this->assertEquals($fetchedUser['parent_id'], $testUser['parent_id'], "Получен неверный родитель пользователя");
        }
    }

    /**
     * @covers UserRepository::SetStatus
     * @depends testGetByBLId
     */
    public function testSetStatus()
    {
        foreach($this->testUsers as $key => $testUser){
            $id = $key+1;
            $this->object->SetStatus($id, $testUser['status']);
            $fetchedUser = $this->object->GetById($id);
            $this->assertEquals($fetchedUser['status'], $testUser['status'], "Неверный статус пользователя");
        }
    }

    /**
     * @covers UserRepository::GetChildrenGroupedByStatus
     * @depends testSetStatus
     */
    public function testGetChildrenGroupedByStatus()
    {
        $parentId = 1;
        $testUsersGroupByStatus = array(0,0,0,0,0,0);
        array_filter($this->testUsers, function($user) use (&$testUsersGroupByStatus, $parentId) {
            if($user['parent_id'] == $parentId)
                $testUsersGroupByStatus[$user['status']]++;
        });

        $usersPerStatus = $this->object->GetChildrenGroupedByStatus($parentId);

        for($i = 1; $i < 6; ++$i){
            $this->assertEquals($testUsersGroupByStatus[$i], $usersPerStatus[$i],
                "Неверное количество пользователей для статуса #$i");
        }
    }

    /**
     * @covers UserRepository::SetBalance
     * @depends testAddUser
     */
    public function testSetBalance()
    {
        foreach($this->testUsers as $key => $testUser){
            $id = $key+1;
            $this->object->SetBalance($id, $testUser['balance']);
            $fetchedUser = $this->object->GetById($id);
            $this->assertEquals($fetchedUser['balance'], $testUser['balance'], "Неверный баланс пользователя");
        }
    }

    /**
     * @covers UserRepository::SetAwaitingAmount
     * @depends testAddUser
     */
    public function testSetAwaitingAmount()
    {
        foreach($this->testUsers as $key => $testUser){
            $id = $key+1;
            $this->object->SetAwaitingAmount($id, $testUser['awaiting_money']);
            $fetchedUser = $this->object->GetById($id);
            $this->assertEquals($fetchedUser['awaiting_money'], $testUser['awaiting_money'],
                "Неверная сумма средств к зачислению для пользователя");
        }
    }

    /**
     * @covers UserRepository::DeleteUserByBLId
     * @depends testGetByBLId
     */
    public function testDeleteUserByBLId()
    {
        $this->object->DeleteUserByBLId(-113);

        $userExists = $this->cms->querySingleValue("
            SELECT COUNT(*)
            FROM `site_referrals`
            WHERE `user_id` = '-113'
        ");
        $this->assertTrue($userExists == 0, "Ошибка удаления пользователя");
    }
}
