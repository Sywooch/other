<?php
namespace Referral\Tests;

$_SERVER['SERVER_NAME'] = 'unit-test.loc';
require_once __DIR__ . '/../../unit-test.loc.php';
require_once __DIR__ . '/../../config/config.php';
require_once __DIR__ . '/../ReferralSystem.class.php';
require_once __DIR__ . '/../repository/UserRepository.class.php';
require_once __DIR__ . '/../repository/OrderRepository.class.php';
require_once __DIR__ . '/../repository/PresentsRepository.class.php';

use Referral\ReferralSystem;
use Referral\Repository\UserRepository;
use Referral\Repository\OrderRepository;
use Referral\Repository\PresentsRepository;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-26 at 18:23:36.
 */
class ReferralSystemTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ReferralSystem
     */
    protected $object;

    /**
     * @var \CMS
     */
    protected $cms;

    static $dumpLoaded = false;

    /**
     * Dataset from json
     * @var array
     */
    static $dataSet;

    private $userRepository;
    private $orderRepository;
    private $giftRepository;

    /**
     * Constructs a test case with the given name.
     *
     * @param  string $name
     * @param  array  $data
     * @param  string $dataName
     */
    public function __construct($name = NULL, array $data = array(), $dataName = '')
    {
        parent::__construct($name, $data, $dataName);

        $cms = new \CMS();
        $cms->Check();

        $this->userRepository = new UserRepository($cms);
        $this->orderRepository = new OrderRepository($cms);
        $this->giftRepository = new PresentsRepository($cms);

        if(!ReferralSystemTest::$dumpLoaded){
            exec("mysql -u" . DB_USER . " -p" . DB_PASS . " " . DB_BASE . " < " . __DIR__ . "/_files/site_referrals.sql");
            exec("mysql -u" . DB_USER . " -p" . DB_PASS . " " . DB_BASE . " < " . __DIR__ . "/_files/site_referral_orders.sql");
            exec("mysql -u" . DB_USER . " -p" . DB_PASS . " " . DB_BASE . " < " . __DIR__ . "/_files/site_referrals_presents.sql");

            ReferralSystemTest::$dataSet = json_decode(file_get_contents(__DIR__ . '/_files/dataset.json'));

            foreach(ReferralSystemTest::$dataSet->users as $testUser){
                $referralId = $this->userRepository->AddUser($testUser->login, $testUser->user_id, $testUser->parent_id);
                $this->userRepository->SetStatus($referralId, $testUser->status);
                $this->userRepository->SetBalance($referralId, $testUser->balance);
            }

            foreach(ReferralSystemTest::$dataSet->orders as $testOrder){
                $this->orderRepository->AddOrder($testOrder->referral_id, $testOrder->order_id, $testOrder->purchase);
            }

            ReferralSystemTest::$dumpLoaded = true;
        }
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->cms = new \CMS();
        $this->cms->Check();
        $this->object = new ReferralSystem($this->cms, array(
            'min_purchase_for_gift' => defined('LIMIT_FOR_BONUS_REFERRAL_SYSTEM') ? LIMIT_FOR_BONUS_REFERRAL_SYSTEM : 35
        ));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Referral\ReferralSystem::paymentAction
     */
    public function testPaymentAction()
    {
        foreach(ReferralSystemTest::$dataSet->users as $testUser){
            if($testUser->user_id < 0) continue;

            $user = $this->userRepository->GetByBLId($testUser->user_id);

            $this->assertTrue(!$this->orderRepository->ExistOrdersForUser($user['id']), 'У пользователя уже есть заказы');
            $request = array(
                'act' => 'payment',
                'id' => $testUser->user_id,
                'order' => $testUser->order,
                'purchase' => $testUser->purchase
            );
            $this->object->paymentAction(new \RequestWrapper($request));

            $this->assertTrue($this->orderRepository->ExistOrdersForUser($user['id']), 'Заказ не добавлися в базу');
            $this->assertEquals(1, $this->userRepository->GetById($user['id'])['status'],
                'После оплаты заказа не присвоился статус участника бонусной');
        }
    }

    /**
     * @covers Referral\ReferralSystem::calculateUserRank
     * @depends testPaymentAction
     */
    public function testCalculateUserRank()
    {
        foreach(ReferralSystemTest::$dataSet->users as $k => $testUser){
            $id = $k+1;
            $this->assertEquals($testUser->expected_status, $this->object->calculateUserRank($id), "Неверный статсус $id пользователя");
        }
    }

    /**
     * @covers Referral\ReferralSystem::calculateUserRank
     * @depends testPaymentAction
     */
    public function testCheckPresents()
    {
        foreach(ReferralSystemTest::$dataSet->users as $k => $testUser){
            $id = $k+1;
            if(isset($testUser->presents))
                $this->assertEquals($testUser->presents, count($this->giftRepository->GetGiftsForUser($id)), "Неверное число подарков");
        }
    }

    /**
     * @covers Referral\ReferralSystem::calculateUserRank
     * @depends testPaymentAction
     */
    public function testSendingAction()
    {
        $request = array(
            'act' => 'sending',
            'id' => 1826,
            'order' => 'ORD-0000007',
            'purchase' => 30
        );
        $this->object->sendingAction(new \RequestWrapper($request));
        $this->assertEquals(0.07 * 30, $this->userRepository->GetByBLId(1114)['balance'], "Неверный баланс пользователя");
    }
}
